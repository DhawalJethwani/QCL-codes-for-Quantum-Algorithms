const rand1=(random()>=0.5);
const rand2=(random()>=0.5);

int n;
input "Enter the bit size of the domain of the function:",n;
int i=0;
int vector v[2^n];
int n1;
int n2;
if rand1
{
  n1=2^(n-1);
  n2=2^(n-1);
  while i<2^n
  {
    if n1==0 and n2>0
    {
      n2=n2-1;
      v[i]=1;
      i=i+1;
    }
    if n2==0 and n1>0
    {
      n1=n1-1;
      v[i]=0;
      i=i+1;
    }
    if n1>0 and n2>0
    {
      if random()>=0.5
      {
        v[i]=1;
        n2=n2-1;
      }
      else
      {
        v[i]=0;
        n1=n1-1;
      }
      i=i+1;
    }
  }
}
else
{
  if rand2
  {
    while i<2^n
    {
      v[i]=0;
      i=i+1;
    }
  }
  else
  {
    while i<2^n
    {
      v[i]=1;
      i=i+1;
    }
  }
}
print v;
qufunct F(quvoid x,int vector v)
{
  dump x;
  print x,"3";
  Perm(v,x);
  print x,"4";
}

procedure deujoz()
{
  qureg x[n];
  qureg y[1];
  int m;
  Not(x);
  H(x & y);
  dump;
  F(x,v);
  print x,"2";
  H(x);
  measure x,m;
}
